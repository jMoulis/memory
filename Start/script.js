// script.js

/**
 * Cr√©ation d'un jeu de m√©moire simple
 * Etapes principales dans l'ordre:
 * 1. S√©lectionner les √©l√©ments du DOM
 * 2. Initialiser les variables du jeu
 * 3. Cr√©er les fonctions du jeu
 * 4. Ajouter les √©couteurs d'√©v√©nements
 * 5. D√©marrer le jeu pour la premi√®re fois
 */

// Initialisation du jeu
document.addEventListener('DOMContentLoaded', () => {
  console.log('Le DOM est charg√© !');

  /**
   * S√©lection des √©l√©ments du DOM
   * @link https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model/Locating_DOM_elements_using_selectors
   */
  const gameContainer = document.getElementById('game-container');
  const moveCounter = document.getElementById('move-counter');
  const victoryMessage = document.getElementById('victory-message');
  const restartButton = document.getElementById('restart-button');
  const difficultySelector = document.getElementById('difficulty');
  const timerElement = document.getElementById('timer');

  // Liste des symboles disponibles
  const symbols = [
    'üçé',
    'üçå',
    'üçá',
    'üçì',
    'üçí',
    'üçë',
    'üçç',
    'ü•ù',
    'üçâ',
    'ü••',
    'ü•≠',
    'üçã',
    'üçà',
    'üçê',
    'üçè',
    'üçä',
    'üçÖ',
    'üçÜ',
    'ü•ë',
    'ü•¶',
    'ü•í',
    'üå∂Ô∏è',
    'üçÑ',
    'ü•ú',
    'üå∞',
    'üçû',
    'ü•ê',
    'ü•ñ',
    'ü•®',
    'üßÄ',
    'üçó',
    'üçñ'
  ];
  let cards = [];
  let firstCard = null;
  let secondCard = null;
  let lockBoard = false;
  let moves = 0;
  let matchedPairs = 0;
  let gridSize = 4; // Valeur par d√©faut
  let timerInterval = null;
  let timer = 0;
  /**
   * Fonction principale pour d√©marrer ou red√©marrer le jeu
   * @link https://developer.mozilla.org/fr/docs/Web/API/Document/DOMContentLoaded_event
   */
  function startGame() {
    // R√©initialiser les variables de jeu
    // @link https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Statements/let
    // @link https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Statements/const
    cards = [];
    firstCard = null;
    secondCard = null;
    lockBoard = false;
    moves = 0;
    matchedPairs = 0;
    moveCounter.textContent = moves;
    victoryMessage.style.display = 'none';
    restartButton.style.display = 'none';
    gameContainer.innerHTML = '';

    // D√©finir la taille de la grille en fonction de la s√©lection
    // @link https://developer.mozilla.org/fr/docs/Web/API/HTMLElement/style
    gridSize = parseInt(difficultySelector.value);

    gameContainer.style.gridTemplateColumns = `repeat(${gridSize}, 100px)`;

    // Calculer le nombre de paires requises
    // @link https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Operators/arithmetic_operators#Division
    const requiredPairs = (gridSize * gridSize) / 2;

    // V√©rifier qu'il y a suffisamment de symboles disponibles
    if (requiredPairs > symbols.length) {
      alert(
        `Pas assez de symboles pour cr√©er ${requiredPairs} paires. Veuillez ajouter plus de symboles dans le script.`
      );
      return;
    }

    // S√©lectionner les symboles n√©cessaires
    // @link https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Global_Objects/Array/slice
    let selectedSymbols = symbols.slice(0, requiredPairs);

    // Cr√©er les paires en dupliquant les symboles s√©lectionn√©s
    // @link https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Global_Objects/Array/concat
    cards = selectedSymbols.concat(selectedSymbols) || [];

    // M√©langer les cartes
    cards = shuffle(cards);

    // Cr√©er les √©l√©ments de carte dans le DOM
    // @link https://developer.mozilla.org/fr/docs/Web/API/Document/createElement
    // @link https://developer.mozilla.org/fr/docs/Web/API/Element/classList
    // @link https://developer.mozilla.org/fr/docs/Web/API/Element/dataset
    // @link https://developer.mozilla.org/fr/docs/Web/API/Element/textContent
    cards.forEach((symbol) => {
      /**
       * A faire
       * 1. Cr√©er un √©l√©ment de carte
       * 2. Ajouter la classe 'card'
       * 3. Attribuer le symbole √† la carte
       * 4. Afficher le symbole (sera cach√© par CSS)
       * 5. Ajouter la carte au conteneur de jeu
       */
    });

    // S√©lectionner toutes les cartes nouvellement cr√©√©es
    // @link https://developer.mozilla.org/fr/docs/Web/API/Document/querySelectorAll
    const allCards = document.querySelectorAll('.card');

    // Ajouter les √©couteurs d'√©v√©nements pour les cartes
    // @link https://developer.mozilla.org/fr/docs/Web/API/EventTarget/addEventListener
    allCards.forEach((card) => {
      /**
       * A faire
       * Ajouter un √©couteur d'√©v√©nement pour retourner la carte
       */
    });
    // D√©marrer le chronom√®tre
    // @link https://developer.mozilla.org/fr/docs/Web/API/WindowOrWorkerGlobalScope/setInterval
    if (timerInterval) clearInterval(timerInterval);
    timerInterval = setInterval(() => {
      timer++;
      timerElement.textContent = timer;
    }, 1000);
  }

  /**
   * Fonction de m√©lange des cartes
   * @param {Array} array - Tableau des cartes
   * @returns {Array} - Tableau m√©lang√©
   * @link https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Global_Objects/Array/sort
   * @link https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Global_Objects/Math/random
   */
  function shuffle(array) {
    /**
     * A faire : M√©langer les cartes (indice de 0.5)
     * @link https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Global_Objects/Array/sort
     *
     */
    return [];
  }

  /**
   * Fonction pour retourner une carte lorsqu'elle est cliqu√©e
   * @link https://developer.mozilla.org/fr/docs/Web/API/EventTarget/addEventListener
   * @link https://developer.mozilla.org/fr/docs/Web/API/Element/classList
   */
  function flipCard() {
    /**
     * A faire : Retourner la carte
     * 1- Emp√™cher de cliquer pendant le d√©lai
     * 2- Emp√™cher de cliquer deux fois sur la m√™me carte
     * 3- Emp√™cher de cliquer sur une carte d√©j√† retourn√©e
     * 4- Ajouter la classe 'flipped' √† la carte
     * 5- V√©rifier si c'est la premi√®re ou la deuxi√®me carte
     * 6- Incr√©menter le nombre de mouvements
     * 7- Mettre √† jour le compteur de mouvements
     * 8- V√©rifier si les cartes correspondent
     */
  }

  /**
   * Fonction pour v√©rifier si les deux cartes s√©lectionn√©es correspondent
   * @link https://developer.mozilla.org/fr/docs/Web/API/HTMLElement/dataset
   */
  function checkForMatch() {
    /**  A faire : V√©rifier si les cartes correspondent
     * 1- V√©rifier si les cartes correspondent (indice v√©rifier le dataset)
     * 2- D√©sactiver les cartes si elles correspondent
     * 3- Incr√©menter le nombre de paires trouv√©es
     * 4- Afficher le message de victoire si toutes les paires sont trouv√©es
     * 5- R√©initialiser le tour
     * 6- Retourner les cartes si elles ne correspondent pas
     *
     */
  }

  /**
   * Fonction pour d√©sactiver les cartes trouv√©es
   * @link https://developer.mozilla.org/fr/docs/Web/API/Element/removeEventListener
   */
  function disableCards() {
    /**
     * A faire : D√©sactiver les cartes trouv√©es
     * 1- Retirer l'√©couteur d'√©v√©nement pour la premi√®re carte
     * 2- Retirer l'√©couteur d'√©v√©nement pour la deuxi√®me carte
     */
  }

  /**
   * Fonction pour retourner les cartes si elles ne correspondent pas
   * @link https://developer.mozilla.org/fr/docs/Web/API/WindowOrWorkerGlobalScope/setTimeout
   */
  function unflipCards() {
    setTimeout(() => {
      /**
       * A faire : Retourner les cartes si elles ne correspondent pas
       * 1- Retirer la classe 'flipped' de la premi√®re carte
       * 2- Retirer la classe 'flipped' de la deuxi√®me carte
       * 3- R√©initialiser le tour
       */
    }, 1000);
  }

  /**
   * Fonction pour r√©initialiser les variables du tour
   */
  function resetBoard() {
    /**
     * A faire : R√©initialiser les variables du tour
     * 1- R√©initialiser les variables firstCard et secondCard
     * 2- D√©verrouiller le tableau
     */
  }

  // √âcouteur d'√©v√©nement pour le bouton de red√©marrage
  // @link https://developer.mozilla.org/fr/docs/Web/API/EventTarget/addEventListener
  restartButton.addEventListener('click', startGame);

  // √âcouteur d'√©v√©nement pour le s√©lecteur de difficult√©
  // @link https://developer.mozilla.org/fr/docs/Web/API/EventTarget/addEventListener
  difficultySelector.addEventListener('change', startGame);

  // D√©marrer le jeu pour la premi√®re fois
  // startGame();
});
